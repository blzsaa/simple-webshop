buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath group: 'io.swagger', name: 'swagger-codegen', version: '2.4.4'
    }
}


plugins {
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'groovy'
    id "com.diffplug.gradle.spotless" version "3.27.1"
    id "com.palantir.docker" version '0.21.0'
}

group = 'hu.blzsaa'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.codehaus.groovy:groovy:3.0.1'

    implementation "org.mapstruct:mapstruct:1.3.0.Final"
    annotationProcessor "org.mapstruct:mapstruct-processor:1.3.0.Final"

    implementation 'io.swagger:swagger-annotations:1.5.22'
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'

    runtimeOnly 'com.h2database:h2'
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.15.0'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

test {
    useJUnitPlatform()
}

spotless {
    java {
        removeUnusedImports()
        googleJavaFormat()
        target 'src/**/*.java'
    }
    groovy {
        greclipse()
        target 'src/**/*.groovy'
    }
}


import io.swagger.codegen.DefaultGenerator
import io.swagger.codegen.config.CodegenConfigurator

def swaggerOutputDir = 'build/generated/swagger/main/java'

task generateServerStub {
    def sourceFile = "file:///$projectDir/src/main/resources/swagger/webshop_swagger.yaml"
    doLast {
        def config = new CodegenConfigurator()
        config.setInputSpec(sourceFile)
        config.setOutputDir("$projectDir")
        config.setLang('spring')
        config.setAdditionalProperties([
                'interfaceOnly'  : 'true',
                'apiPackage'     : 'hu.blzsaa.simple_webshop.api',
                'modelPackage'   : 'hu.blzsaa.simple_webshop.model',
                'dateLibrary'    : 'java8',
                'sourceFolder'   : swaggerOutputDir,
                'delegatePattern': 'true'
        ])
        new DefaultGenerator().opts(config.toClientOptInput()).generate()
    }

    inputs.files(fileTree(sourceFile))
    outputs.dir(swaggerOutputDir)
}


configurations {
    swagger
}

sourceSets {
    swagger {
        compileClasspath = configurations.swaggerCompile
        java {
            srcDir file("${project.buildDir.path}/$swaggerOutputDir")
        }
    }
    main {
        compileClasspath += swagger.output
        runtimeClasspath += swagger.output
        groovy { srcDirs += ["${buildDir}/generated/sources/annotationProcessor/groovy/main"] }
    }
}

compileSwaggerJava.dependsOn generateServerStub
classes.dependsOn swaggerClasses
compileJava.dependsOn compileSwaggerJava

sourceSets.main.java.srcDir swaggerOutputDir
sourceSets.main.resources.srcDir swaggerOutputDir

docker {
    name "${project.group}/${jar.archiveBaseName.get()}:${jar.archiveVersion.get()}"
    files jar.archiveFile.get()
    buildArgs(['JAR_FILE': "${jar.archiveFileName.get()}"])
}
docker.dependsOn bootJar