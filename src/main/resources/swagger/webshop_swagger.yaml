swagger: "2.0"
info:
  description: "Very simple webshop"
  version: "1.0.0"
  title: "Very simple webshop"
host: "localhost:8080"
basePath: "/v2"
tags:
  - name: "product"
    description: "Everything about products"
schemes:
  - "https"
  - "http"
paths:
  /products:
    post:
      tags:
        - "product"
      summary: "Add a new product to the store"
      description: "Add a new product to the store"
      operationId: "addProduct"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Product object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Product2Create"
      responses:
        201:
          description: "Product created"
          headers:
            Location:
              type: string
              format: url
              description: A link to the product
          schema:
            $ref: "#/definitions/Product"
        400:
          description: "Invalid input"
    get:
      tags:
        - "product"
      summary: "Find all products"
      description: "Returns a all products"
      operationId: "getAllProducts"
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
  /products/{productId}:
    get:
      tags:
        - "product"
      summary: "Find product by ID"
      description: "Returns a single product"
      operationId: "getProductById"
      produces:
        - "application/json"
      parameters:
        - name: "productId"
          in: "path"
          description: "ID of product to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Product not found"
    put:
      tags:
        - "product"
      summary: "update product"
      description: "Updates and returns a single product"
      operationId: "updateProductById"
      produces:
        - "application/json"
      parameters:
        - name: "productId"
          in: "path"
          description: "ID of product to return"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "new values"
          required: true
          schema:
            $ref: "#/definitions/Product2Create"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Product not found"
  /orders:
    post:
      tags:
        - "product"
      summary: "Create new order"
      description: "create new order"
      operationId: "createNewOrder"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Order (email address, product ids, quantities)"
          required: true
          schema:
            $ref: "#/definitions/Order"
      responses:
        200:
          description: "Order created"
          schema:
            $ref: "#/definitions/CreatedOrder"
        400:
          description: "Invalid input"
        404:
          description: "One or mote products were not found"
    get:
      tags:
        - "product"
      summary: "Find all orders between optional time frames"
      description: "Find all orders between optional time frames"
      operationId: "getAllOrderBetweenTimeFrames"
      produces:
        - "application/json"
      parameters:
        - in: query
          name: "from"
          type: "string"
          format: "date-time"
          description: from date
        - in: query
          name: "to"
          type: "string"
          format: "date-time"
          description: to date
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CreatedOrder"
definitions:
  Product2Create:
    type: "object"
    required:
      - "name"
      - "price"
    properties:
      name:
        type: "string"
        example: "snake oil"
        description: "Name of the product"
      price:
        type: "integer"
        format: int64
        example: 100000
        description: "Price in EURO"
  Product:
    type: "object"
    required:
      - "id"
      - "name"
      - "price"
    properties:
      id:
        type: "integer"
        format: int64
        example: 10
        description: "Product's id"
      name:
        type: "string"
        example: "snake oil"
        description: "Name of the product"
      price:
        type: "integer"
        format: int64
        example: 100000
        description: "Price in EURO"
  Order:
    type: "object"
    required:
      - "email-address"
      - "productId"
    properties:
      email-address:
        type: "string"
        example: "firstName.lastName@company.com"
        description: "Buyer's email address"
        pattern: '[^@]+@[^\.]+\..+'
      productId:
        type: "array"
        items:
          type: "integer"
          format: int64
          example: 100000
        description: "ids of products to buy"
  CreatedOrder:
    type: "object"
    required:
      - "email-address"
      - "productId"
      - "timestamp"
      - "price"
    properties:
      email-address:
        type: "string"
        example: "firstName.lastName@company.com"
        description: "Buyer's email address"
      productId:
        type: "array"
        items:
          type: "integer"
          format: int64
          example: 100000
        description: "ids of products to buy"
      timestamp:
        type: "string"
        format: "date-time"
        example: "2017-07-21T17:32:28Z"
        description: "timestamp of the transaction"
      price:
        type: "integer"
        format: int64
        example: 100000
        description: "Summary price for all products in EURO"